generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String    @unique
  email       String    @unique
  password    String
  dob         String?
  phone       String?
  website     String?
  linkedin    String?
  github      String?
  resumes     Resume[]
  role        Role       @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  experiences Experience[]
  skills      Skill[]
  projects    Project[]
  certificates  Certificate[]
  educatiionalQualifications EducationalQualification[]
  references    Reference[]
  settings      Setting[]
  devSkills      DeveloperSkill[]
 
}

model Setting {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  userId                String?    @db.ObjectId
  user                  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  showPersonalDetail    Boolean    @default(true)
  showEducation         Boolean    @default(true)
  showWorkExperience    Boolean    @default(true)
  showCareerObjective   Boolean    @default(true)
  showProfilePicture    Boolean?   @default(true)
  showReference         Boolean?   @default(false)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model Resume {
  id                             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId                         String?    @db.ObjectId
  user                           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileImage                   String?    
  careerObjective                String
  summary                        String?
  workExperiences                Experience[]
  references                     Reference[]
  educationalQualifications      EducationalQualification[]
  skills                         Skill[]
  devSkills                      DeveloperSkill[]
  projects                       Project[]
  certificates                   Certificate[]
  languageProficiencies          String[]
  interests                      String[]
  personalDetail                 Json
  declaration                    String?
  mySignature                    String
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt
}

model Experience {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  resumeId            String?    @db.ObjectId
  resume              Resume?    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId              String?    @db.ObjectId
  user                User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName         String
  jobTitle            String
  jobResposibilities  String[]
  startDate           DateTime?
  endDate             DateTime?
  description         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Reference {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  resumeId          String?      @db.ObjectId
  resume            Resume?      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId            String?     @db.ObjectId
  user              User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  position          String
  company           String?
  phone             String
  relationship      String?
  email             String      @unique
  address           String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model EducationalQualification {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  resumeId       String?    @db.ObjectId
  resume         Resume?    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId         String?    @db.ObjectId
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution    String
  subject        String?
  degree         String?
  fieldOfStudy   String?
  startDate      DateTime
  endDate        DateTime?
  GPA            Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Skill {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  resumeId                  String?    @db.ObjectId
  resume                    Resume?    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId                    String?    @db.ObjectId
  user                      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                      String
  proficiency               String?   
  experience                String?   
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model DeveloperSkill {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId               String    @db.ObjectId
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId             String?      @db.ObjectId
  resume               Resume?      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  programmingLanguages String[]
  frameworks           String[]
  tools                String[]
  platforms            String[]
  softSkills           String[]  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Project {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  resumeId       String?    @db.ObjectId
  resume         Resume?    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId         String?    @db.ObjectId
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectTitle              String
  projectGitLink            String?
  projectLiveLink           String
  projectAchievements       String[]
  startDate                 DateTime
  endDate                   DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Certificate {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  resumeId       String?    @db.ObjectId
  resume         Resume?    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  userId         String?    @db.ObjectId
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificateTitle          String
  certificateFrom           String
  certificateLink           String
  certificateAchievements   String[]
  startDate                 DateTime
  endDate                   DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}



enum Role {
  ADMIN
  USER
}
